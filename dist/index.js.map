{"version":3,"file":"index.js","sources":["../src/Helpers.js","../src/Auttar.js"],"sourcesContent":["const NAME = '%c Auttar ';\nconst BACKGROUND = 'background:#bc0909 ; padding: 2px; border-radius: 2px;  color: #fff ';\n\nexport function required(name, param) {\n  if (param === undefined) {\n    throw new Error(`Parâmetro obrigatório ${name} não declarado.`);\n  }\n\n  return param;\n}\n\nexport function logInfo(msg) {\n  console.log(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\nexport function logError(msg) {\n  console.error(NAME, BACKGROUND, msg); // eslint-disable-line no-console\n}\n\n/**\n * Add spaces to match the max screen length\n * @param {string} text\n * @param {number} maxChar\n * @returns {string}\n */\nexport function addSpaces(text, maxChar) {\n  return text\n    .split('')\n    .concat(...Array(maxChar).fill(' '))\n    .slice(0, maxChar)\n    .join('');\n}\n\nexport default {\n  required,\n  logInfo,\n  logError,\n  addSpaces,\n};\n","/* eslint-disable */\nimport { logInfo } from './Helpers';\n\nconst privateVariables = {\n  transactions: {\n    credit: {\n      base: 112,\n      installment: 113,\n      installmentWithInterest: 114,\n    },\n    debit: {\n      base: 101,\n      voucher: 106,\n    },\n    cancel: 128,\n    confirm: 6,\n    requestCancel: 191,\n  },\n  return: {\n    success: 0,\n    timeOut: 1,\n    notAuthorizes: 5,\n    internetError: 10,\n    intertefError: 12,\n    error: 20,\n    ecommerceError: 30,\n  },\n  errorCodes: {\n    5300: 'Valor não informado',\n    5301: 'Cartão inválido',\n    5302: 'Cartão vencido',\n    5303: 'Data de vencimento inválido',\n    5304: 'Código de segurança inválido',\n    5305: 'Taxa de serviço excede limite',\n    5306: 'Operação não permitida',\n    5307: 'Dados inválidos',\n    5308: 'Valor mínimo da parcela inválido',\n    5309: 'Número de parcelas inválido',\n    5310: 'Número de parcelas excede limite',\n    5311: 'Valor da entrada maior ou igual ao valor da transação',\n    5312: 'Valor da parcela inválido',\n    5313: 'Data inválida',\n    5314: 'Prazo excede limite',\n    5316: 'NSU inválido',\n    5317: 'Operação cancelada pelo usuário',\n    5318: 'Documento inválido (CPF ou CNPJ)',\n    5319: 'Valor do documento inválido',\n    5328: 'Erro na captura de dados do Pin-Pad',\n    5329: 'Erro na captura do chip ou cartão removido antes da hora.',\n    5364: 'Data de emissão do cartão inválida',\n    5355: 'O tipo de financiamento informado não é coerente com o número de parcelas',\n  },\n  ws: null,\n  timeout: null,\n  close: true,\n  timeoutConn: null,\n  firstCall: true,\n};\n\nfunction _disconnect() {\n  privateVariables.ws.close();\n}\n\nfunction _clearTimeout() {\n  privateVariables.close = false;\n  clearTimeout(privateVariables.timeoutConn);\n}\n\nfunction _timeout(time = 10000) {\n  privateVariables.close = true;\n  privateVariables.timeoutConn = setTimeout(() => {\n    if (privateVariables.close) {\n      privateVariables.ws.close();\n    } else {\n      _clearTimeout();\n    }\n  }, time);\n}\n\nfunction _connect(host, payload) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (privateVariables.ws === null) {\n        privateVariables.ws = new WebSocket(host);\n      } else if (privateVariables.ws.readyState === 2 || privateVariables.ws.readyState === 3) {\n        _disconnect();\n        privateVariables.ws = new WebSocket(host);\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    if (privateVariables.ws) {\n      _timeout();\n      if (privateVariables.firstCall) {\n        privateVariables.firstCall = false;\n        privateVariables.ws.onopen = () => {\n          _clearTimeout();\n          privateVariables.ws.send(JSON.stringify(payload));\n          _timeout(60000);\n        };\n      } else {\n        privateVariables.ws.send(JSON.stringify(payload));\n      }\n\n      privateVariables.ws.onmessage = (evtMsg) => {\n        _clearTimeout();\n        resolve(JSON.parse(evtMsg.data));\n      };\n\n      privateVariables.ws.onerror = (evtError) => {\n        _clearTimeout();\n        reject(evtError);\n      };\n    }\n  });\n}\n\nfunction _send(payload) {\n  return new Promise((resolve, reject) => {\n    try {\n      if (privateVariables.ws && privateVariables.ws.readyState === 1) {\n        privateVariables.ws.send(JSON.stringify(payload));\n        privateVariables.ws.onmessage = (evtMsg) => {\n          resolve(JSON.parse(evtMsg.data));\n        };\n      } else {\n        setTimeout(() => _send(payload), 5000);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * @typedef {Object} AuttarCupomLinha\n * @property {string} linha\n */\n\n/** @typedef {Object} AuttarSuccessResponse\n * @property {String} bandeira\n * @property {String} cartao\n * @property {String} codigoAprovacao\n * @property {String} codigoErro\n * @property {String} codigoRespAutorizadora\n * @property {Array} cupomCliente\n * @property {Array.<AuttarCupomLinha>} cupomEstabelecimento\n * @property {Array.<AuttarCupomLinha>} cupomReduzido\n * @property {Array} display\n * @property {Number} nsuAutorizadora\n * @property {Number} nsuCTF\n * @property {Number} operacao\n * @property {String} redeAdquirente\n * @property {Number} retorno\n * @property {String} valorTransacao\n */\n\n/**\n * @class Auttar WebSocket\n * @constructor {AuttarConstructor}\n */\n/**\n * @typedef {object} AuttarConstructor\n * @property {string} host - WebSocket Host URL\n * @property {boolean} debug - Método debug da classe\n * @property {string} orderId - Número de identificação da venda\n * @property {float} amount - Valor da venda\n * @property {AuttarSuccessResponse} ctfTrasaction - Objecto de resposta do websocket\n */\n\nclass Auttar {\n  /**\n   * Construtor da classe\n   * @param {AuttarConstructor} props\n   */\n  constructor(props) {\n    this.__host = props.host || 'ws://localhost:2500';\n    this.debug = props.debug || false;\n    this.orderId = props.orderId || '';\n    this.__amount = 0;\n    if (props.amount) this.amount = props.amount;\n    this.__transactionDate = new Date().toLocaleDateString('pt-BR', {\n      year: '2-digit',\n      month: '2-digit',\n      day: '2-digit',\n      timeZone: 'America/Sao_Paulo',\n    }).replace(/\\//g, '');\n    this.ctfTransaction = {};\n    this.__debugMessage = [];\n  }\n\n  debugLog(message) {\n    if (this.debug) {\n      logInfo(message);\n    }\n  }\n\n  classError(message) {\n    this.debugMessage = {\n      message,\n      logLevel: 'error',\n    };\n\n    return new Error(message);\n  }\n\n  get debugMessage() {\n    return this.__debugMessage;\n  }\n\n  set debugMessage(value) {\n    if (this.debug) {\n      const debugLog = {\n        logLevel: 'info',\n        message: '',\n        ...value,\n        date: new Date().toISOString(),\n      };\n\n      if (debugLog.logLevel === 'log' && debugLog.message) {\n        return this.debugLog(debugLog.message);\n      }\n\n      this.__debugMessage.push({\n                                 ...debugLog,\n                                 date: new Date().toISOString(),\n                               });\n\n      if (debugLog.logLevel === 'info' && debugLog.message) {\n        this.debugLog(debugLog.message);\n      }\n    }\n  }\n\n  get amount() {\n    return this.__amount;\n  }\n\n  /**\n   * Define o valor em para a classe em centavos\n   * @param value\n   */\n  set amount(value) {\n    if (typeof value === 'number' && value <= 0) {\n      throw new Error('Não é possível definir um valor menor ou igual a zero.');\n    } else {\n      this.__amount = parseFloat(value) * 100;\n    }\n  }\n\n  /**\n   * Pagamento com cartão de crédito, podendo ser declarado\n   * com parcelamento e se o juro é da administradora.\n   * @param {number} installments - número de parcelas\n   * @param {boolean} withInterest - juros pela administradora\n   * @returns {Promise<AuttarSuccessResponse>}\n   */\n  credit(installments = 1, withInterest = false) {\n    return new Promise((resolve, reject) => {\n      const requisition = {\n        valorTransacao: this.amount,\n        documento: this.orderId,\n        operacao: privateVariables.transactions.credit.base,\n        dataTransacao: this.__transactionDate,\n      };\n      if (installments > 1) {\n        requisition.operacao = privateVariables.transactions.credit.installment;\n        requisition.numeroParcelas = installments;\n      }\n\n      if (installments > 1 && withInterest) {\n        requisition.operacao = privateVariables.transactions.credit.installmentWithInterest;\n        requisition.numeroParcelas = installments;\n      }\n\n      this.debugMessage = {\n        message: `Pagamento com cartão de crédito. Operação: ${requisition.operacao}. Valor ${this.amount} centavos`,\n      };\n\n      _connect(this.__host, requisition)\n        .then((response) => {\n          if (response.retorno > 0) {\n            const errorMsg = privateVariables.errorCodes[response.codigoErro]\n                             || response.display.length\n                             ? response.display.map(m => m.mensagem).join(' ')\n                             : ' ';\n            const error = this.classError(`Transação não concluída ${response.codigoErro}: ${errorMsg}`);\n\n            reject(error);\n          }\n\n          this.ctfTransaction = {\n            ...response,\n            dataTransacao: this.__transactionDate,\n          };\n\n          this.debugMessage = {\n            message: `Resposta do servidor -> ${JSON.stringify(response)}`,\n            logLevel: 'log',\n          };\n\n          this.debugMessage = {\n            message: this.ctfTransaction,\n            logLevel: 'json',\n          };\n\n          resolve(response);\n        })\n        .catch((e) => this.classError(e));\n    });\n  }\n\n  /**\n   * Pagamento com cartão de crédito, podendo ser\n   * declarado com parcelamento e se o juro é da administradora.\n   * @param {boolean} isVoucher\n   * @returns {Promise<AuttarSuccessResponse>}\n   */\n  debit(isVoucher = false) {\n    return new Promise((resolve, reject) => {\n      const operacao = isVoucher\n                       ? privateVariables.transactions.debit.voucher\n                       : privateVariables.transactions.debit.base;\n\n      this.debugMessage = {\n        message: `Pagamento com cartão de débito. Operação: ${operacao}. Valor ${this.amount} centavos`,\n      };\n\n      _connect(this.__host, {\n        valorTransacao: this.amount,\n        documento: this.orderId,\n        dataTransacao: this.__transactionDate,\n        operacao,\n      })\n        .then((response) => {\n          if (response.retorno > 0) {\n            const errorMsg = privateVariables.errorCodes[response.codigoErro]\n                             || response.display.length\n                             ? response.display.map(m => m.mensagem).join(' ')\n                             : ' ';\n            const error = this.classError(`Transação não concluída ${response.codigoErro}: ${errorMsg}`);\n\n            reject(error);\n          }\n\n          this.ctfTransaction = {\n            ...response,\n            dataTransacao: this.__transactionDate,\n          };\n\n          this.debugMessage = {\n            message: `Resposta do servidor -> ${JSON.stringify(response)}`,\n            logLevel: 'log',\n          };\n\n          this.debugMessage = {\n            message: this.ctfTransaction,\n            logLevel: 'json',\n          };\n\n          resolve(response);\n        })\n        .catch((e) => this.classError(e));\n    });\n  }\n\n  /**\n   * Confirma a operação com o CTF\n   * @returns {Promise<void>}\n   */\n  async confirm() {\n    try {\n      const operacao = privateVariables.transactions.confirm;\n      const response = await _connect(this.__host, { operacao });\n\n      this.debugMessage = {\n        message: `Confirmação de pagamento da operação realizada.\n      Operação: ${this.ctfTransaction.operacao}\n      Data: ${this.ctfTransaction.dataTransacao}\n      Valor: ${this.amount}\n      Bandeira: ${this.ctfTransaction.bandeira}\n      Cartão: ${this.ctfTransaction.cartao}`,\n      };\n\n      if (response.retorno > 0) {\n        const errorMsg = privateVariables.errorCodes[response.codigoErro]\n                         || response.display.length\n                         ? response.display.map(m => m.mensagem).join(' ')\n                         : ' ';\n\n        const error = this.classError(`Transação não concluída ${response.codigoErro}: ${errorMsg}`);\n\n        reject(error);\n      }\n\n      this.ctfTransaction = Object.assign(this.ctfTransaction, response);\n\n      this.debugMessage = {\n        message: `Resposta do servidor -> ${JSON.stringify(response)}`,\n        logLevel: 'log',\n      };\n\n      this.debugMessage = {\n        message: response,\n        logLevel: 'json',\n      };\n\n      return Promise.resolve(response);\n    } catch (error) {\n      this.classError(error);\n    }\n  }\n\n  /**\n   * Inicia o processo de cancelamento de compra.\n   * @returns {Promise<void>}\n   */\n  requestCancellation() {\n    return new Promise((resolve, reject) => {\n      const operacao = privateVariables.transactions.requestCancel;\n\n      this.debugMessage = {\n        message: `Requisição de cancelamento de compra.\n      Operação: ${this.ctfTransaction.operacao}\n      Data: ${this.ctfTransaction.dataTransacao}\n      Valor: ${this.amount}\n      NSU: ${this.ctfTransaction.nsuCTF}`,\n      };\n\n      _connect(this.__host, { operacao })\n        .then((response) => {\n          if (response.retorno > 0) {\n            const errorMsg = privateVariables.errorCodes[response.codigoErro]\n                             || response.display.length\n                             ? response.display.map(m => m.mensagem).join(' ')\n                             : ' ';\n\n            const error = this.classError(`Transação não concluída ${response.codigoErro}: ${errorMsg}`);\n\n            reject(error);\n          }\n\n          this.debugMessage = {\n            message: `Resposta do servidor -> ${JSON.stringify(response)}`,\n            logLevel: 'log',\n          };\n\n          this.debugMessage = {\n            message: responsea,\n            logLevel: 'json',\n          };\n\n          resolve(response);\n        })\n        .catch((e) => this.classError(e));\n    });\n  }\n\n  /**\n   * Realiza o cancelamento da compra.\n   * @param {string} prop.dataTransacao\n   * @param {number} prop.amount\n   * @param {string} prop.nsuCTF\n   * @returns {Promise<any>}\n   */\n  cancel(prop = {}) {\n    return new Promise((resolve, reject) => {\n      const operacao = privateVariables.transactions.cancel;\n      const tefOperacao = prop.operacao || this.ctfTransaction.operacao;\n      const tefDataTransacao = prop.dataTransacao || this.ctfTransaction.dataTransacao;\n      const tefAmount = prop.amount ? parseFloat(prop.amount) * 100 : this.ctfTransaction.valorTransacao;\n      const tefNsuCTF = prop.nsuCTF || this.ctfTransaction.nsuCTF;\n\n      this.debugMessage = {\n        message: `Cancelamento de compra.\n        Operação: ${tefOperacao}\n        Data: ${tefDataTransacao}\n        Valor: ${tefAmount}\n        NSU: ${tefNsuCTF}`,\n      };\n\n      _connect(this.__host, {\n        operacao,\n        valorTransacao: tefAmount,\n        dataTransacao: tefDataTransacao,\n        nsuCTF: tefNsuCTF,\n      })\n        .then((response) => {\n          if (response.retorno > 0) {\n            const errorMsg = privateVariables.errorCodes[response.codigoErro] || response.display[0].mensagem;\n\n            const error = this.classError(`Transação não concluída ${response.codigoErro}: ${errorMsg}`);\n\n            reject(error);\n          }\n\n          this.debugMessage = {\n            message: `Resposta do servidor -> ${JSON.stringify(response)}`,\n            logLevel: 'log',\n          };\n\n          this.debugMessage = {\n            message: response,\n            logLevel: 'json',\n          };\n\n          resolve(response);\n        })\n        .catch((e) => this.classError(e));\n    });\n  }\n}\n\nexport default Auttar;\n"],"names":["NAME","BACKGROUND","logInfo","msg","console","log","f","args","i","arguments","length","Promise","resolve","apply","this","e","reject","body","recover","result","then","value","direct","privateVariables","transactions","credit","base","installment","installmentWithInterest","debit","voucher","cancel","confirm","requestCancel","return","success","timeOut","notAuthorizes","internetError","intertefError","error","ecommerceError","errorCodes","ws","timeout","close","timeoutConn","firstCall","_disconnect","_clearTimeout","clearTimeout","_timeout","time","setTimeout","_connect","host","payload","WebSocket","readyState","onopen","send","JSON","stringify","onmessage","evtMsg","parse","data","onerror","evtError","Auttar","props","__host","debug","orderId","__amount","amount","__transactionDate","Date","toLocaleDateString","year","month","day","timeZone","replace","ctfTransaction","__debugMessage","message","debugMessage","logLevel","Error","installments","withInterest","requisition","valorTransacao","_this","documento","operacao","dataTransacao","numeroParcelas","response","retorno","errorMsg","codigoErro","display","map","m","mensagem","join","classError","catch","isVoucher","_this2","_this3","bandeira","cartao","Object","assign","_this4","nsuCTF","responsea","prop","tefOperacao","_this5","tefDataTransacao","tefAmount","parseFloat","tefNsuCTF","debugLog","date","toISOString","push"],"mappings":"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"}